package aoc19.days;

import org.junit.jupiter.api.Test;

import java.util.Arrays;

import static org.junit.jupiter.api.Assertions.*;

public class Day20SolverTest {
	@Test
	void testExamples() {
		Day20Solver.TorusMaze tm1 = new Day20Solver.TorusMaze(17, 15, 5, 5, Arrays.asList(
				"         A           ",
				"         A           ",
				"  #######.#########  ",
				"  #######.........#  ",
				"  #######.#######.#  ",
				"  #######.#######.#  ",
				"  #######.#######.#  ",
				"  #####  B    ###.#  ",
				"BC...##  C    ###.#  ",
				"  ##.##       ###.#  ",
				"  ##...DE  F  ###.#  ",
				"  #####    G  ###.#  ",
				"  #########.#####.#  ",
				"DE..#######...###.#  ",
				"  #.#########.###.#  ",
				"FG..#########.....#  ",
				"  ###########.#####  ",
				"             Z       ",
				"             Z       "
		));
		assertEquals(23, tm1.findShortestPathLength());
		Day20Solver.TorusMaze tm2 = new Day20Solver.TorusMaze(31, 33, 7, 7, Arrays.asList(
				"                   A               ",
				"                   A               ",
				"  #################.#############  ",
				"  #.#...#...................#.#.#  ",
				"  #.#.#.###.###.###.#########.#.#  ",
				"  #.#.#.......#...#.....#.#.#...#  ",
				"  #.#########.###.#####.#.#.###.#  ",
				"  #.............#.#.....#.......#  ",
				"  ###.###########.###.#####.#.#.#  ",
				"  #.....#        A   C    #.#.#.#  ",
				"  #######        S   P    #####.#  ",
				"  #.#...#                 #......VT",
				"  #.#.#.#                 #.#####  ",
				"  #...#.#               YN....#.#  ",
				"  #.###.#                 #####.#  ",
				"DI....#.#                 #.....#  ",
				"  #####.#                 #.###.#  ",
				"ZZ......#               QG....#..AS",
				"  ###.###                 #######  ",
				"JO..#.#.#                 #.....#  ",
				"  #.#.#.#                 ###.#.#  ",
				"  #...#..DI             BU....#..LF",
				"  #####.#                 #.#####  ",
				"YN......#               VT..#....QG",
				"  #.###.#                 #.###.#  ",
				"  #.#...#                 #.....#  ",
				"  ###.###    J L     J    #.#.###  ",
				"  #.....#    O F     P    #.#...#  ",
				"  #.###.#####.#.#####.#####.###.#  ",
				"  #...#.#.#...#.....#.....#.#...#  ",
				"  #.#####.###.###.#.#.#########.#  ",
				"  #...#.#.....#...#.#.#.#.....#.#  ",
				"  #.###.#####.###.###.#.#.#######  ",
				"  #.#.........#...#.............#  ",
				"  #########.###.###.#############  ",
				"           B   J   C               ",
				"           U   P   P               "
		));
		assertEquals(58, tm2.findShortestPathLength());
	}
	@Test
	void testRecursiveExamples() {
		Day20Solver.TorusMaze tm2 = new Day20Solver.TorusMaze(31, 33, 7, 7, Arrays.asList(
				"                   A               ",
				"                   A               ",
				"  #################.#############  ",
				"  #.#...#...................#.#.#  ",
				"  #.#.#.###.###.###.#########.#.#  ",
				"  #.#.#.......#...#.....#.#.#...#  ",
				"  #.#########.###.#####.#.#.###.#  ",
				"  #.............#.#.....#.......#  ",
				"  ###.###########.###.#####.#.#.#  ",
				"  #.....#        A   C    #.#.#.#  ",
				"  #######        S   P    #####.#  ",
				"  #.#...#                 #......VT",
				"  #.#.#.#                 #.#####  ",
				"  #...#.#               YN....#.#  ",
				"  #.###.#                 #####.#  ",
				"DI....#.#                 #.....#  ",
				"  #####.#                 #.###.#  ",
				"ZZ......#               QG....#..AS",
				"  ###.###                 #######  ",
				"JO..#.#.#                 #.....#  ",
				"  #.#.#.#                 ###.#.#  ",
				"  #...#..DI             BU....#..LF",
				"  #####.#                 #.#####  ",
				"YN......#               VT..#....QG",
				"  #.###.#                 #.###.#  ",
				"  #.#...#                 #.....#  ",
				"  ###.###    J L     J    #.#.###  ",
				"  #.....#    O F     P    #.#...#  ",
				"  #.###.#####.#.#####.#####.###.#  ",
				"  #...#.#.#...#.....#.....#.#...#  ",
				"  #.#####.###.###.#.#.#########.#  ",
				"  #...#.#.....#...#.#.#.#.....#.#  ",
				"  #.###.#####.###.###.#.#.#######  ",
				"  #.#.........#...#.............#  ",
				"  #########.###.###.#############  ",
				"           B   J   C               ",
				"           U   P   P               "
		));
		assertEquals(-1, tm2.findShortestRecursivePathLength());
		Day20Solver.TorusMaze tm3 = new Day20Solver.TorusMaze(41, 33, 7, 7, Arrays.asList(
				"             Z L X W       C                 ",
				"             Z P Q B       K                 ",
				"  ###########.#.#.#.#######.###############  ",
				"  #...#.......#.#.......#.#.......#.#.#...#  ",
				"  ###.#.#.#.#.#.#.#.###.#.#.#######.#.#.###  ",
				"  #.#...#.#.#...#.#.#...#...#...#.#.......#  ",
				"  #.###.#######.###.###.#.###.###.#.#######  ",
				"  #...#.......#.#...#...#.............#...#  ",
				"  #.#########.#######.#.#######.#######.###  ",
				"  #...#.#    F       R I       Z    #.#.#.#  ",
				"  #.###.#    D       E C       H    #.#.#.#  ",
				"  #.#...#                           #...#.#  ",
				"  #.###.#                           #.###.#  ",
				"  #.#....OA                       WB..#.#..ZH",
				"  #.###.#                           #.#.#.#  ",
				"CJ......#                           #.....#  ",
				"  #######                           #######  ",
				"  #.#....CK                         #......IC",
				"  #.###.#                           #.###.#  ",
				"  #.....#                           #...#.#  ",
				"  ###.###                           #.#.#.#  ",
				"XF....#.#                         RF..#.#.#  ",
				"  #####.#                           #######  ",
				"  #......CJ                       NM..#...#  ",
				"  ###.#.#                           #.###.#  ",
				"RE....#.#                           #......RF",
				"  ###.###        X   X       L      #.#.#.#  ",
				"  #.....#        F   Q       P      #.#.#.#  ",
				"  ###.###########.###.#######.#########.###  ",
				"  #.....#...#.....#.......#...#.....#.#...#  ",
				"  #####.#.###.#######.#######.###.###.#.#.#  ",
				"  #.......#.......#.#.#.#.#...#...#...#.#.#  ",
				"  #####.###.#####.#.#.#.#.###.###.#.###.###  ",
				"  #.......#.....#.#...#...............#...#  ",
				"  #############.#.#.###.###################  ",
				"               A O F   N                     ",
				"               A A D   M                     "
		));
		assertEquals(396, tm3.findShortestRecursivePathLength());
	}
}
